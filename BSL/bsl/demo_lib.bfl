/*
This example lib is imported in syntax/m_import.bf for demo purposes. It contains
some
*/

// dummy function
function dummy(){}


// dummy function in namespace
function nested::dummy(){}


// fibonacci sequence
function fibonacci(LONG N) => LONG last, LONG[] fib {
    using => iterate(LONG _p=0, LONG _pp=0 => LONG p@_p, LONG pp@_pp, LONG[] fib#) <N, #=0 {
		LONG temp := if(# < 2, #, _p + _pp);
		fib = temp;
		pp = _p;
		p = temp;
	}
}


// custom search string method
function search_string(STRING haystack, STRING needle => LONG index, BOOL found) {
	LONG needle_size := string_length(needle);

	LONG index_, BOOL found_ = nolimit do (haystack, needle, needle_size, BOOL _found=false)
	                                        => LONG index, BOOL found@_found
    {
		index = #;
		found, _found = haystack[#:#+needle_size] == needle || _found;
	} while (!_found && # < string_length(haystack) - needle_size);

	// the left values here are the result of the enclosing scope, the right
	// side are the variables returned via 'using => ' from the while loop.
	// While they look the same, they are not and point to two different ports.
	// The left points to the output port {compound}/output/"found" while the
	// right points to {do_while}//"found".
	index := if(found_, index_, -1);
	found = found_;
}


// quicksort partition function
function internal::quicksort_partition(LONG[] arr, LONG low, LONG high) => LONG[] out_arr, LONG pivot {
    AUTO x = arr[high];
    AUTO i = low - 1;

    arr, i := iterate(arr, x, i => LONG[] out_arr@arr, LONG out_i@i) < high-low, #<j>=low {
        AUTO arr_j = arr[j];
        BOOL condition = arr_j <= x;

        // updated i
        AUTO i_inc := i+1;

        AUTO arr_i = arr[i_inc];

        // swap (or not)
        arr[j] := if(condition, arr_i, arr_j);
        arr[i_inc] := if(condition, arr_j, arr_i);

        out_i := if(condition, i_inc, i);
        out_arr = arr;
    }
    AUTO i_inc = i+1;

    // final swap
    AUTO arr_i = arr[i_inc];
    AUTO arr_h = arr[high];
    arr[i_inc] = arr_h;
    arr[high] = arr_i;

    pivot = i_inc;
    out_arr = arr;
}


// quicksort
// (source: https://www.geeksforgeeks.org/iterative-quick-sort)
function quicksort(LONG[] arr) => LONG[] sorted {
    AUTO arr_size := array_size(arr);

    // initial low and high
    AUTO low = 0;
    AUTO high = arr_size - 1;

    // create an array of sufficient length
    LONG[] stack = [LONG, arr_size];
    stack[0] = low;
    stack[1] = high;

    LONG top = 1;

    // no need for nolimit since we know the worst case scenario
    // "using" loads "sorted" automatically into the "sorted" variable
    using => do(arr, stack, top) < arr_size
                 => LONG[] _stack@stack, LONG[] sorted@arr, LONG _top@top
    {
        AUTO high = stack[top];
        stack[top] = -1;
        top = top - 1;

        AUTO low = stack[top];
        stack[top] = -1;
        top = top - 1;

        // out_arr already updated for the next iteration!
        sorted, LONG pivot = qs_partition(arr, low, high);

        // left update left side of the pivot. Since Bifrost has a pull
        // mechanism, its not sure if this code even executes. Implementing
        // algorithms here is a bit tricky since it looks like other languages
        // but at the same follows Bifrost rules
        NODE update_left = compound(LONG[] _stack=stack, LONG low=low, LONG _top=top, LONG pivot=pivot)
                               => LONG[] stack, LONG top
        {
            _top = _top + 1;
            _stack[_top] = low;
            _top = _top + 1;
            _stack[_top] = pivot - 1;

            top = _top;
            stack = _stack;
        }

        // determine if the left branch is needed
        stack := if(pivot - 1 > low, update_left->stack, stack);
        top := if(pivot - 1 > low, update_left->top, top);

        // left update right side of the pivot. Since Bifrost has a pull
        // mechanism, its not sure if this code even executes. Implementing
        // algorithms here is a bit tricky since it looks like other languages
        // but at the same follows Bifrost rules
        NODE update_right = compound(LONG[] _stack=stack, LONG high=high, LONG _top=top, LONG pivot=pivot)
                                => LONG[] stack, LONG top
        {
            _top = _top + 1;
            _stack[_top] = pivot + 1;
            _top = _top + 1;
            _stack[_top] = high;

            top = _top;
            stack = _stack;
        }

        // determine if the right branch is needed and update the output variables
        _stack := if(pivot + 1 < high, update_right->stack, stack);
        // the top variable here created since we cant use _top in the condition expression
        top := if(pivot + 1 < high, update_right->top, top);
        _top = top;

    } while (top > 0)
}